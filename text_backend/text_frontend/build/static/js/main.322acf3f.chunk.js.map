{"version":3,"sources":["logo.svg","api.js","Component/TextBox/index.js","Component/Bot/index.js","Component/CompareButton/index.js","Component/GuessBar/index.js","Component/StatBox/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","comp","id","label","make_comparison","axios","get","submit_texts","texts","extended_comp","text1","box1","text2","box2","post","get_headers","get_text_objects","text","request_data","TextBox","Component","this","props","name","onChange","e","handleChange","rows","cols","CompareButton","Button","onClick","variant","color","GuessBar","percent","style","width","ProgressBar","determine_color","now","StatBox","state","headers","then","result","setState","data","Headers","catch","error","console","log","textObjects","t1","TextObject1","t2","TextObject2","generate_rows","TableBody","map","row","TableRow","key","TableCell","component","scope","header","align","format_data","TableContainer","Paper","Table","size","aria-label","TableHead","format_headers","createData","calories","fat","carbs","protein","App","bar_percent","undefined","bind","response","second_response","handle_second_response","sec_response","confidence_percent","toFixed","event","newText","target","value","prevState","retrieve_stats","submit_comparison","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.322acf3f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import axios from \"axios\";\n\n\n\n// async function test_call(){\n//   const promise = await axios.get(\"http://localhost:8000/api/test\");\n//   const status = promise.status;\n//   if(status===200)\n//   {\n//     return promise.data.data;\n//   } else {\n//       console.log(\"There has been an error!\")\n//   }\n// }\n\nconst comp = {\n  id: 0,\n  label: 'book'\n};\n\nexport function make_comparison(id) {\n  return axios\n      .get(\"/api/comps/\"+id)\n      // .then(response => callback_func(response))\n      // .catch(error => console.log(error));\n}\n\nexport function submit_texts(texts) {\n\n  let extended_comp = comp;\n  extended_comp.text1 = texts.box1;\n  extended_comp.text2 = texts.box2;\n\n  return axios\n      .post(\"/api/comps/\", comp)\n\n  // axios\n  //     .post(\"/api/comps/\", comp)\n  //     .then(response => make_comparison(response.data.id)\n  //         .then(response =>))\n  //     .catch(error => error);\n}\n\nexport function get_headers() {\n  return axios\n      .get(\"/api/headers/\")\n      // .then(response => console.log(response.data))\n      // .catch(error => console.log(error))\n}\n\nexport function get_text_objects(text) {\n  let request_data = {\n    text: text,\n    label: comp.label\n  };\n  return axios\n      .post(\"/api/textObjects/\", request_data)\n      // .then(response => console.log(response.data))\n      // .catch(error => console.log(error))\n}\n\nexport default {submit_texts, get_headers, make_comparison, get_text_objects}","import React, { Component } from \"react\";\n\nexport default class TextBox extends Component {\n\n  render() {\n    return (\n        <div>\n          <label>Text{this.props.name}: </label>\n          <textarea\n                  onChange={(e) => this.props.handleChange(e, this.props.name)}\n                    rows={5}\n                    cols={5}\n         />\n        </div>\n    );\n  }\n}","import React, { Component } from \"react\";\n\nimport axios from \"axios\";\n\nexport default class Message extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      msg:\"\",\n    };\n    this.loadMsg = this.loadMsg.bind(this);\n  }\n\n\ncomponentWillMount() {\n  this.loadMsg();\n}\n\nasync loadMsg()\n{\n  const promise = await axios.get(\"http://localhost:8000/api/test\");\n  const status = promise.status;\n  if(status===200)\n  {\n    const data = promise.data.data;\n    this.setState({msg:data});\n  }\n}\n\nrender() {\n    console.log(this.state.msg);\n  return(\n    <div>\n      <h1> Message </h1>\n      <h4> {this.state.msg} </h4>\n    </div>\n  )\n}\n}\n","import React, { Component } from \"react\";\nimport Button from '@material-ui/core/Button';\n\nexport default class CompareButton extends Component {\n\n  render() {\n    return (\n        <Button onClick={this.props.onClick}\n                variant=\"contained\"\n                color=\"primary\">\n            compare\n        </Button>\n    );\n  }\n}","import ProgressBar from 'react-bootstrap/ProgressBar'\nimport React, { Component } from \"react\";\n\nexport default class GuessBar extends Component {\n\n    constructor(props) {\n        super(props);\n\n    }\n\n    determine_color(percent) {\n        if(percent > 2/3*100){\n            // Green Bar for more than 2/3\n            return \"success\"\n        }\n\n        if(percent < 1/3*100){\n            // Red Bar for less than 1/3\n            return \"danger\"\n        }\n        // Yellow bar for less than 2/3 but greater than 1/3\n        return \"warning\"\n\n    }\n\n    render() {\n        return (\n            <div style={{width: '20%'}}>\n                <h2> Similarity: </h2>\n            <ProgressBar\n                variant={this.determine_color(this.props.percent)}\n                now={this.props.percent}\n                label={this.props.percent+'%'}\n            />\n            </div>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport { palette } from '@material-ui/system';\nimport Box from '@material-ui/core/Box';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nexport default class StatBox extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            headers: []\n        };\n\n    }\n\n\n    componentDidMount() {\n        this.props.get_headers()\n            .then(result => this.setState({headers: result.data.Headers}))\n            .catch(error => console.log(error));\n    }\n\n    generate_rows() {\n        let rows;\n\n        if (typeof this.props.data.textObjects == 'undefined') {\n            rows = [{}, {}];\n            return rows\n        }\n        const t1 = this.props.data.textObjects.TextObject1;\n        const t2 = this.props.data.textObjects.TextObject2;\n\n        t1.name = \"Text_1\";\n        t2.name = \"Text_2\";\n\n        rows = [t1, t2];\n\n        return rows\n    }\n\n    format_data() {\n        if (typeof this.props.data != 'undefined') {\n\n            let rows = this.generate_rows(this.props.data);\n\n            let temp2 = (<TableBody>\n                {rows.map(row => (\n                    <TableRow key={row.name}>\n                        <TableCell component=\"th\" scope=\"row\">\n                            {row.name}\n                        </TableCell>\n                        {this.state.headers.map(header => (\n                            <TableCell key={[header]} align=\"right\">\n                                {row.[header]}\n                            </TableCell>\n                            )\n                        )}\n                    </TableRow>\n                ))}\n            </TableBody>);\n            return temp2;\n        } else {\n\n            let default_table = ( <TableBody></TableBody> );\n            return default_table\n        }\n    }\n\n    format_headers() {\n\n        return (\n            <TableRow>\n                <TableCell> {' '} </TableCell>\n                {this.state.headers.map(header =>\n                    <TableCell align=\"right\" key={header}>{header}</TableCell>)}\n            </TableRow>\n        )\n\n\n    }\n\n    render() {\n        const data = this.format_data();\n        return (\n            <div style={{width: \"100%\"}}>\n            <TableContainer component={Paper}>\n                <Table size=\"small\" aria-label=\"a dense table\">\n                    <TableHead>\n                        {this.format_headers()}\n                    </TableHead>\n                    {this.format_data()}\n                </Table>\n            </TableContainer>\n            </div>\n        );\n  }\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { submit_texts, get_headers, make_comparison, get_text_objects } from \"./api.js\"\n\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nimport Message from \"./Component/Bot/index\";\nimport TextBox from \"./Component/TextBox/index\"\nimport CompareButton from \"./Component/CompareButton/index\"\nimport GuessBar from \"./Component/GuessBar/index\"\nimport ProgressBar from 'react-bootstrap/ProgressBar'\nimport axios from \"axios\";\nimport StatBox from \"./Component/StatBox/index\"\n\nfunction createData(name, calories, fat, carbs, protein) {\n  return { name, calories, fat, carbs, protein };\n}\n\nconst tester_data = [\n    createData('Text_1', 159, 6.0, 24, 4.0),\n    createData('Text_2', 237, 9.0, 37, 4.3),\n];\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            text: {\n                box1: \" \",\n                box2: \" \"\n            },\n            bar_percent: 0,\n            data: { textObjects: undefined,\n                    comp: undefined}\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n\n    }\n\n    retrieve_stats() {\n        return get_text_objects(this.state.text)\n            .then(response => this.setState(\n                {data: { textObjects: response.data,\n                               comp: this.state.data.comp}}))\n            .catch(error => console.log(error))\n    }\n\n    submit_comparison() {\n        return submit_texts(this.state.text)\n                    .then(response => make_comparison(response.data.id)\n                        .then(second_response => this.handle_second_response(second_response))\n                        .catch(error => console.log(error))\n                    .catch( error => console.log(error)))\n    }\n\n    handle_second_response(sec_response) {\n\n        console.log(sec_response.data);\n        let result = sec_response.data.result;\n        let confidence_percent = (sec_response.data.percent * 100.0).toFixed(2);\n        this.setState({bar_percent: confidence_percent});\n\n\n    }\n\n    handleChange(event, name) {\n        let newText = event.target.value;\n        this.setState(prevState => ({\n            text: {\n                ...prevState.text,\n                [name]: newText\n            }\n        }));\n        let p = this.retrieve_stats();\n\n    }\n\n\n  render() {\n    return (\n        <div>\n            <h1> Text-Analyzer </h1>\n\n            {/*<h1>{' '}</h1>*/}\n            <TextBox\n                name=\"box1\"\n                handleChange={this.handleChange}\n            />\n\n            <TextBox\n                name=\"box2\"\n                handleChange={this.handleChange}\n            />\n\n            <StatBox\n                data={this.state.data}\n                get_headers={get_headers}\n            />\n\n            <GuessBar\n                percent={this.state.bar_percent}\n            />\n\n            <h1>{' '}</h1>\n\n            <CompareButton\n                onClick={() => this.submit_comparison()}\n            />\n\n\n        </div>\n  );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}